package com.muzi.weshop.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_MODEL".
*/
public class GoodsModelDao extends AbstractDao<GoodsModel, Long> {

    public static final String TABLENAME = "GOODS_MODEL";

    /**
     * Properties of entity GoodsModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ClassId = new Property(0, String.class, "classId", false, "CLASS_ID");
        public final static Property Details = new Property(1, String.class, "details", false, "DETAILS");
        public final static Property GoodName = new Property(2, String.class, "goodName", false, "GOOD_NAME");
        public final static Property Id = new Property(3, Long.class, "id", true, "_id");
        public final static Property Img = new Property(4, String.class, "img", false, "IMG");
        public final static Property Price = new Property(5, int.class, "price", false, "PRICE");
        public final static Property Count = new Property(6, int.class, "count", false, "COUNT");
        public final static Property Selected = new Property(7, boolean.class, "selected", false, "SELECTED");
    }


    public GoodsModelDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_MODEL\" (" + //
                "\"CLASS_ID\" TEXT," + // 0: classId
                "\"DETAILS\" TEXT," + // 1: details
                "\"GOOD_NAME\" TEXT," + // 2: goodName
                "\"_id\" INTEGER PRIMARY KEY ," + // 3: id
                "\"IMG\" TEXT," + // 4: img
                "\"PRICE\" INTEGER NOT NULL ," + // 5: price
                "\"COUNT\" INTEGER NOT NULL ," + // 6: count
                "\"SELECTED\" INTEGER NOT NULL );"); // 7: selected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsModel entity) {
        stmt.clearBindings();
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(1, classId);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(2, details);
        }
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(3, goodName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(5, img);
        }
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getCount());
        stmt.bindLong(8, entity.getSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsModel entity) {
        stmt.clearBindings();
 
        String classId = entity.getClassId();
        if (classId != null) {
            stmt.bindString(1, classId);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(2, details);
        }
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(3, goodName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(5, img);
        }
        stmt.bindLong(6, entity.getPrice());
        stmt.bindLong(7, entity.getCount());
        stmt.bindLong(8, entity.getSelected() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public GoodsModel readEntity(Cursor cursor, int offset) {
        GoodsModel entity = new GoodsModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // classId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // details
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // img
            cursor.getInt(offset + 5), // price
            cursor.getInt(offset + 6), // count
            cursor.getShort(offset + 7) != 0 // selected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsModel entity, int offset) {
        entity.setClassId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDetails(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.getInt(offset + 5));
        entity.setCount(cursor.getInt(offset + 6));
        entity.setSelected(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
